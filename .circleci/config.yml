version: 2

aliases:
  env: &env
    environment:
      BUILD_IMAGE: mmcloughlin/ec3-build
      DOCKERFILE: Dockerfile
  runner: &runner
    <<: *env
    docker:
      - image: ${BUILD_IMAGE}:commit-${CIRCLE_SHA1}
        auth:
          username: ${DOCKERHUB_USERNAME}
          password: ${DOCKERHUB_PASSWORD}
    working_directory: /go/src/github.com/mmcloughlin/ec3
  checkdirty: &checkdirty
    name: Git Status
    command: |
      git diff
      test -z "$(git status --porcelain)"

jobs:
  container:
    <<: *env
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Configure Environment
          command: |
            echo "export CACHE_TAG=dockerfile-$(sha1sum ${DOCKERFILE})" >> ${BASH_ENV}
            echo "export COMMIT_TAG=commit-${CIRCLE_SHA1}" >> ${BASH_ENV}
      - run:
          name: Docker Login
          command: |
            echo ${DOCKERHUB_PASSWORD} | docker login --username ${DOCKERHUB_USERNAME} --password-stdin
      - run:
          name: Docker Pull
          command: |
            docker pull ${BUILD_IMAGE}:latest || true
            docker pull ${BUILD_IMAGE}:${CACHE_TAG} || true
      - run:
          name: Docker Build
          command: |
            docker build \
              --cache-from ${BUILD_IMAGE}:latest \
              --cache-from ${BUILD_IMAGE}:${CACHE_TAG} \
              --tag ${BUILD_IMAGE}:latest \
              --tag ${BUILD_IMAGE}:${CACHE_TAG} \
              --tag ${BUILD_IMAGE}:${COMMIT_TAG} \
              .
      - run:
          name: Docker Push
          command: |
            docker push ${BUILD_IMAGE}:latest
            docker push ${BUILD_IMAGE}:${CACHE_TAG}
            docker push ${BUILD_IMAGE}:${COMMIT_TAG}
  test:
    <<: *runner
    steps:
      - checkout
      - run:
          name: Bootstrap
          command: make bootstrap
      - run:
          name: Build
          command: go build ./...
      - run:
          name: Test
          command: go test -coverprofile=coverage.out -covermode=count ./...
      - run:
          name: Upload Coverage
          command: bash <(curl -s https://codecov.io/bash) -F unittests -f coverage.out
          when: on_success
  generate:
    <<: *runner
    steps:
      - checkout
      - run:
          name: Bootstrap
          command: make bootstrap
      - run:
          name: Generate
          command: make generate
      - run: *checkdirty
      - run:
          name: Format
          command: make fmt
      - run: *checkdirty

workflows:
  version: 2
  ci:
    jobs:
      - container
      - test:
          requires:
            - container
      - generate:
          requires:
            - container
