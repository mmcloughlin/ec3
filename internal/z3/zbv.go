// Code generated by wrap.go. DO NOT EDIT.

package z3

/*
#cgo LDFLAGS: -lz3
#include <stdint.h>
#include <z3.h>
*/
import "C"

// Bitwise negation.
func (x *BV) Not() *BV {
	return &BV{
		ctx: x.ctx,
		ast: C.Z3_mk_bvnot(x.ctx, x.ast),
	}
}

// Add returns standard twos complement addition.
func (x *BV) Add(y *BV) *BV {
	return &BV{
		ctx: x.ctx,
		ast: C.Z3_mk_bvadd(x.ctx, x.ast, y.ast),
	}
}

// Sub returns standard twos complement subtraction.
func (x *BV) Sub(y *BV) *BV {
	return &BV{
		ctx: x.ctx,
		ast: C.Z3_mk_bvsub(x.ctx, x.ast, y.ast),
	}
}

func (x *BV) SLE(y *BV) *Bool {
	return &Bool{
		ctx: x.ctx,
		ast: C.Z3_mk_bvsle(x.ctx, x.ast, y.ast),
	}
}
